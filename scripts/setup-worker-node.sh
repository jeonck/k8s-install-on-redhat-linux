#!/bin/bash

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
JOIN_COMMAND="$1"

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

error() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $1" >&2
    exit 1
}

usage() {
    echo "Usage: $0 \"<join-command>\""
    echo ""
    echo "Example:"
    echo "  $0 \"kubeadm join 192.168.1.100:6443 --token abc123.xyz789 --discovery-token-ca-cert-hash sha256:hash\""
    echo ""
    echo "The join command is generated by the master node setup script."
    echo "You can also get it by running on the master node:"
    echo "  kubeadm token create --print-join-command"
    exit 1
}

check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root"
    fi
}

check_join_command() {
    if [[ -z "$JOIN_COMMAND" ]]; then
        log "No join command provided"
        usage
    fi
    
    # Basic validation of join command
    if [[ ! "$JOIN_COMMAND" =~ ^kubeadm\ join ]]; then
        error "Invalid join command format. Command should start with 'kubeadm join'"
    fi
    
    log "Join command validated"
}

check_prerequisites() {
    log "Checking prerequisites..."
    
    # Check if kubelet is installed and enabled
    if ! command -v kubeadm >/dev/null 2>&1; then
        error "kubeadm not found. Please run install-kubernetes.sh first"
    fi
    
    if ! systemctl is-enabled --quiet kubelet; then
        error "kubelet is not enabled. Please run install-kubernetes.sh first"
    fi
    
    # Check if containerd is running
    if ! systemctl is-active --quiet containerd; then
        error "containerd is not running. Please run install-containerd.sh first"
    fi
    
    log "Prerequisites check passed"
}

check_existing_cluster() {
    log "Checking if node is already part of a cluster..."
    
    if [[ -f /etc/kubernetes/kubelet.conf ]]; then
        log "Node appears to be already joined to a cluster"
        log "If you want to rejoin, please run: kubeadm reset"
        
        read -p "Do you want to reset and rejoin? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            log "Resetting node..."
            kubeadm reset -f
            
            # Clean up
            rm -rf /etc/kubernetes/
            rm -rf /var/lib/etcd/
            
            # Reset iptables
            iptables -F && iptables -t nat -F && iptables -t mangle -F && iptables -X
            
            # Restart containerd and kubelet
            systemctl restart containerd kubelet
            
            log "Node reset completed"
        else
            error "Node is already part of a cluster. Exiting."
        fi
    fi
}

join_cluster() {
    log "Joining worker node to the cluster..."
    log "Executing: $JOIN_COMMAND"
    
    # Add containerd socket to join command if not present
    if [[ ! "$JOIN_COMMAND" =~ --cri-socket ]]; then
        JOIN_COMMAND="${JOIN_COMMAND} --cri-socket=unix:///run/containerd/containerd.sock"
    fi
    
    eval "$JOIN_COMMAND"
    
    log "Successfully joined the cluster"
}

verify_join() {
    log "Verifying worker node join..."
    
    # Wait for kubelet to start
    sleep 10
    
    # Check if kubelet is running
    if systemctl is-active --quiet kubelet; then
        log "kubelet service is running"
    else
        error "kubelet service is not running"
    fi
    
    # Check if node configuration exists
    if [[ -f /etc/kubernetes/kubelet.conf ]]; then
        log "kubelet configuration found"
    else
        error "kubelet configuration not found"
    fi
    
    # Check if bootstrap-kubelet.conf exists (temporary file during join)
    if [[ -f /etc/kubernetes/bootstrap-kubelet.conf ]]; then
        log "Bootstrap configuration found (join in progress)"
    fi
}

display_status() {
    log "Worker node join completed!"
    echo ""
    echo "=== NODE STATUS ==="
    echo "Node hostname: $(hostname)"
    echo "Node IP: $(hostname -I | awk '{print $1}')"
    echo ""
    echo "To verify the node joined successfully, run the following on the master node:"
    echo "  kubectl get nodes"
    echo ""
    echo "The node may take a few minutes to appear as 'Ready' status."
    echo ""
}

display_next_steps() {
    echo "Next steps:"
    echo "1. Verify node status from master: kubectl get nodes"
    echo "2. Check node details: kubectl describe node $(hostname)"
    echo "3. View pods on this node: kubectl get pods -A -o wide --field-selector spec.nodeName=$(hostname)"
    echo ""
}

main() {
    log "Starting Kubernetes worker node setup..."
    
    check_root
    check_join_command
    check_prerequisites
    check_existing_cluster
    join_cluster
    verify_join
    display_status
    display_next_steps
    
    log "Worker node setup completed successfully!"
}

# Check for help flag
if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
    usage
fi

main "$@"